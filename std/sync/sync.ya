fn NewCond  (l: Locker) : *Cond { EXT }

extend (self: Cond) {

fn Broadcast  () : () { EXT }

fn Signal  () : () { EXT }

fn Wait  () : () { EXT }

}

extend (self: Map) {

fn Delete  (key: any) : () { EXT }

fn Load  (key: any) : Option<any> { EXT }

fn LoadAndDelete  (key: any) : Option<any> { EXT }

fn LoadOrStore  (key: any, value: any) : Option<any> { EXT }

fn Range  (f: fn (key: any, value: any) : bool) : () { EXT }

fn Store  (key: any, value: any) : () { EXT }

}

extend (self: Mutex) {

fn Lock  () : () { EXT }

fn TryLock  () : bool { EXT }

fn Unlock  () : () { EXT }

}

extend (self: Once) {

fn Do  (f: fn () : ()) : () { EXT }

}

extend (self: Pool) {

fn Get  () : any { EXT }

fn Put  (x: any) : () { EXT }

}

extend (self: RWMutex) {

fn Lock  () : () { EXT }

fn RLock  () : () { EXT }

fn RLocker  () : Locker { EXT }

fn RUnlock  () : () { EXT }

fn TryLock  () : bool { EXT }

fn TryRLock  () : bool { EXT }

fn Unlock  () : () { EXT }

}

extend (self: WaitGroup) {

fn Add  (delta: int) : () { EXT }

fn Done  () : () { EXT }

fn Wait  () : () { EXT }

}

struct Cond{
  L: Locker
}

trait Locker {

  fn Lock () : ()
  fn Unlock () : ()
}

struct Map{

}

struct Mutex{

}

struct Once{

}

struct Pool{
  New: fn () : any
}

struct RWMutex{

}

struct WaitGroup{

}